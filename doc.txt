# Configuration de l'Environnement HeySprech API

## Description du Projet

HeySprech est un système de traitement automatique de vidéos YouTube qui :
1. Télécharge l'audio des vidéos YouTube
2. Transcrit l'audio en allemand
3. Traduit la transcription en français
4. Fournit une API et une interface d'administration

## Structure du Projet

```
heysprech-api/
├── api.py              # API FastAPI principale
├── config.py           # Configuration globale
├── database.py         # Gestion de la base de données
├── download_model.py   # Téléchargement du modèle de traduction
├── logger.py           # Configuration des logs
├── process_audio.py    # Traitement des fichiers audio
├── start_pipeline.py   # Script de démarrage du pipeline
├── transcribe_api.py   # Worker de transcription
├── traduction_lignes.py # Worker de traduction
├── requirements.txt    # Dépendances Python
├── audios/            # Dossier des fichiers audio
├── output/            # Dossier des sorties JSON
├── logs/              # Dossier des logs
└── templates/         # Templates HTML
    └── admin.html     # Interface d'administration
```

## 1. Prérequis système

```bash
# Mise à jour du système
sudo apt-get update
sudo apt-get upgrade

# Installation des dépendances système
sudo apt-get install -y python3 python3-pip mysql-server redis-server ffmpeg
```

## 2. Configuration de MySQL

```bash
# Démarrage du service MySQL
sudo systemctl start mysql
sudo systemctl enable mysql

# Création de la base de données et de l'utilisateur
sudo mysql -e "
CREATE DATABASE heysprech;
CREATE USER 'heysprech'@'localhost' IDENTIFIED BY 'votre_mot_de_passe';
GRANT ALL PRIVILEGES ON heysprech.* TO 'heysprech'@'localhost';
FLUSH PRIVILEGES;
"
```

## 3. Configuration de Redis

```bash
# Démarrage du service Redis
sudo systemctl start redis-server
sudo systemctl enable redis-server
```

## 4. Configuration de l'environnement Python

```bash
# Création d'un environnement virtuel (recommandé)
python3 -m venv venv
source venv/bin/activate

# Installation des dépendances Python
pip install -r requirements.txt

# Le fichier requirements.txt contient :
fastapi==0.68.1
uvicorn==0.15.0
redis==4.5.4
mysql-connector-python==8.0.28
yt-dlp==2023.3.4
whisperx==3.1.1
transformers==4.28.1
torch==2.0.0
python-multipart==0.0.6
aiofiles==0.7.0
jinja2==3.0.1

# Téléchargement du modèle de traduction
python download_model.py
```

## 5. Configuration des variables d'environnement

Créez un fichier `.env` à la racine du projet :

```bash
# Base de données
DB_HOST=localhost
DB_USER=heysprech
DB_PASSWORD=votre_mot_de_passe
DB_DATABASE=heysprech
DB_PORT=3306

# API
API_HOST=0.0.0.0
API_PORT=8000

# Redis
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0
```

## 6. Structure des dossiers

```bash
# Création des dossiers nécessaires
mkdir -p audios output logs templates
chmod 755 audios output logs templates
```

## 7. Démarrage des services

```bash
# Terminal 1 - API FastAPI
python api.py

# Terminal 2 - Pipeline de traitement
python start_pipeline.py
```

## 8. Utilisation du Système

### Interface d'administration

Accédez à l'interface d'administration via votre navigateur :
```
http://localhost:8000/admin
```

L'interface permet de :
- Ajouter de nouvelles vidéos YouTube
- Suivre l'état du traitement
- Voir les statistiques du système
- Gérer les vidéos existantes

### API REST

Endpoints disponibles :

1. Ajout d'une vidéo :
```bash
curl -X POST "http://localhost:8000/api/videos" \
     -H "Content-Type: application/json" \
     -d '{"youtube_id": "VIDEO_ID"}'
```

2. Récupération d'une vidéo :
```bash
curl "http://localhost:8000/api/videos/1"
```

3. Liste de toutes les vidéos :
```bash
curl "http://localhost:8000/api/videos"
```

4. État du système :
```bash
curl "http://localhost:8000/api/system/status"
```

5. Suppression d'une vidéo :
```bash
curl -X DELETE "http://localhost:8000/api/videos/1"
```

## Structure des données

La base de données contient une table 'videos' avec les champs suivants :
- id : Identifiant unique
- youtube_id : ID de la vidéo YouTube
- audio_path : Chemin vers le fichier audio MP3
- json_data : Données de transcription et traduction
- status : État du traitement (pending/processing/completed/error)
- created_at : Date de création
- updated_at : Date de dernière mise à jour

## Format du JSON de sortie

Le JSON stocké contiendra :
```json
{
    "segments": [
        {
            "text": "Texte original en allemand",
            "translation_fr": "Traduction en français",
            "start": 0.0,
            "end": 2.5
        }
    ]
}
```

## Dépannage

1. Si MySQL refuse la connexion :
```bash
sudo mysql
ALTER USER 'heysprech'@'localhost' IDENTIFIED WITH mysql_native_password BY 'votre_mot_de_passe';
FLUSH PRIVILEGES;
```

2. Si Redis ne démarre pas :
```bash
sudo systemctl status redis-server
# Vérifiez les logs
sudo journalctl -u redis-server
```

3. Si les workers ne démarrent pas :
```bash
# Vérifiez les processus
ps aux | grep python

# Vérifiez les logs Redis
redis-cli monitor

# Vérifiez l'état des queues
redis-cli llen transcription_queue
redis-cli llen translation_queue
```

## Monitoring et Maintenance

### Logs du système

Les logs sont stockés dans le dossier `logs/` :
- `api.log` : Logs de l'API
- `transcription.log` : Logs du worker de transcription
- `translation.log` : Logs du worker de traduction

Pour consulter les logs en temps réel :
```bash
tail -f logs/api.log
tail -f logs/transcription.log
tail -f logs/translation.log
```

### Maintenance

1. Nettoyage des fichiers temporaires :
```bash
# Nettoyer les fichiers audio plus vieux que 7 jours
find audios/ -type f -mtime +7 -delete

# Nettoyer les fichiers de sortie plus vieux que 30 jours
find output/ -type f -mtime +30 -delete
```

2. Rotation des logs :
Les logs sont automatiquement rotés :
- Taille maximale par fichier : 10MB
- Nombre de fichiers de backup : 5

3. Sauvegarde de la base de données :
```bash
# Sauvegarde quotidienne
mysqldump -u heysprech -p heysprech > backup/heysprech_$(date +%Y%m%d).sql
```

### Surveillance des ressources

1. Utilisation du CPU et de la mémoire :
```bash
htop -p $(pgrep -f "python.*api.py|python.*start_pipeline.py")
```

2. Espace disque :
```bash
du -sh audios/ output/ logs/
df -h
```

3. État des queues Redis :
```bash
redis-cli info | grep 'used_memory\|connected_clients'
```